{"version":3,"sources":["webpack://vrbeach/./src/index.js"],"names":[],"mappingsfile":"bundle.min.js","sourcesContent":["/*\nimport * as THREE from 'three';\n\nlet scene, camera, renderer;\n\nscene = document.querySelector('a-scene').object3D;\ncamera = new THREE.PerspectiveCamera(\n  40,\n  window.innerWidth / window.innerHeight,\n  0.0001,\n  10000\n);\ncamera.position.set(0, 0, 50);\nrenderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\nrenderer.setSize(window.innerWidth, window.innerHeight);\ndocument.body.appendChild(renderer.domElement);\n\nconst handleResize = () => {\n  const { innerWidth, innerHeight } = window;\n  renderer.setSize(innerWidth, innerHeight);\n  camera.aspect = innerWidth / innerHeight;\n  camera.updateProjectionMatrix();\n};\n\nconst createSphere = (r = 1, color = 0xffffff) => {\n  const sphereGeo = new THREE.SphereGeometry(r, 20, 20);\n  const sphereMat = new THREE.MeshPhongMaterial({\n    color,\n    shininess: 30,\n  });\n  return new THREE.Mesh(sphereGeo, sphereMat);\n};\n\nconst createPointLight = (i = 1, color = 0xffffff) => {\n  return new THREE.PointLight(color, i);\n};\n\nconst sun = createSphere(5, 0xffc928);\nconst l1 = createPointLight(0.8);\nconst l2 = createPointLight(0.4);\nl1.position.set(60, 20, 60);\nl2.position.set(-30, 0, 20);\n\nscene.add(sun, l2);\nsun.add(l1);\n\nconst createPlanet = (r, color) => {\n  const sphere = createSphere(r, color);\n  const pivot = new THREE.Object3D();\n  pivot.add(sphere);\n  return {\n    sphere,\n    pivot,\n  };\n};\n\nconst mercury = createPlanet(0.3, 0xffb940);\nconst venus = createPlanet(1, 0xcb5c36);\nconst earth = createPlanet(1, 0x01c6fd);\nconst mars = createPlanet(0.6, 0xff5227);\nconst jupiter = createPlanet(2.5, 0xfecc7c);\nconst saturn = createPlanet(2, 0xe9c66d);\nconst uranus = createPlanet(1.5, 0x96c1eb);\nconst neptune = createPlanet(1.4, 0xcdddec);\nmercury.sphere.position.set(6, 0, 0);\nvenus.sphere.position.set(8, 0, 0);\nearth.sphere.position.set(-10.5, 0, 0);\nmars.sphere.position.set(-12.5, 0, 0);\njupiter.sphere.position.set(17, 0, 0);\nsaturn.sphere.position.set(-23, 0, 0);\nuranus.sphere.position.set(-28, 0, 0);\nneptune.sphere.position.set(32, 0, 0);\nsun.add(\n  mercury.pivot,\n  venus.pivot,\n  earth.pivot,\n  mars.pivot,\n  jupiter.pivot,\n  saturn.pivot,\n  uranus.pivot,\n  neptune.pivot\n);\n\nmercury.pivot.rotation.x = 5;\nvenus.pivot.rotation.x = 8;\nearth.pivot.rotation.x = -9;\nmars.pivot.rotation.x = 10;\njupiter.pivot.rotation.x = -11;\nsaturn.pivot.rotation.x = -12;\nuranus.pivot.rotation.x = 14;\nneptune.pivot.rotation.x = 16;\n\nconst loop = () => {\n  mercury.pivot.rotation.z += 0.005;\n  venus.pivot.rotation.z += 0.004;\n  earth.pivot.rotation.z += 0.004;\n  mars.pivot.rotation.z += 0.003;\n  jupiter.pivot.rotation.z += 0.002;\n  saturn.pivot.rotation.z += 0.002;\n  uranus.pivot.rotation.z += 0.001;\n  neptune.pivot.rotation.z += 0.001;\n  sun.rotation.z += 0.00001;\n  sun.rotation.x += 0.001;\n  sun.rotation.y += 0.00001;\n  renderer.render(scene, camera);\n  requestAnimationFrame(loop);\n};\n\nloop();\nwindow.addEventListener('resize', handleResize);\n*/\n"],"sourceRoot":""}